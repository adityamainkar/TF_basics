(1) Define zeroes/ones
a = np.zeros((3, 3)) # Create a 3x3 matrix filled with zero
print(a)
b = tf.zeros((3, 3)) # Create a 3x3 tensor filled with zero
print(b)
O/P: [[0. 0. 0.]
      [0. 0. 0.]
      [0. 0. 0.]]
      Tensor("zeros:0", shape=(3, 3), dtype=float32)
a = np.ones((3, 3)) # Create a 3x3 matrix filled with ones
print(a)
b = tf.ones((3, 3)) # Create a 3x3 tensor filled with ones
print(b)

Q) : Create a tensor, D with constant() with values [7, 8, 10]. Create another tensor, 
E of size (3, ) using fill() that has value 10. Add the tensors, and call it F.
Then run F and print the output. 
'''
d = tf.constant([7,8,9])
e = tf.fill((3,),10)
f = d + e 
with tf.Session() as sess2:
    print(sess2.run(f))
-----------------------------------------------------------------------------------------------------------
(2) range/linspace

linval = np.linspace(1.0, 10.0, 20)
print(linval) # This print statement prints the value stored
a = tf.constant(linval) # Convert to a tensorflow tensor
print(a) # This does not print the value stored

[ 1.          1.47368421  1.94736842  2.42105263  2.89473684  3.36842105
  3.84210526  4.31578947  4.78947368  5.26315789  5.73684211  6.21052632
  6.68421053  7.15789474  7.63157895  8.10526316  8.57894737  9.05263158
  9.52631579 10.        ]
Tensor("Const_2:0", shape=(20,), dtype=float64)

a = tf.range(1, 10, 0.5)
print(a)
with tf.Session() as sess1:
    print(sess1.run(a)
    
Tensor("range:0", shape=(18,), dtype=float32)
[1.  1.5 2.  2.5 3.  3.5 4.  4.5 5.  5.5 6.  6.5 7.  7.5 8.  8.5 9.  9.5]
-------------------------------------------------------------------------------------------------------------

(3) Constant/Placeholders and Variables
v  = tf.constant(2)

ra = np.array([[1, 2],[7, 8]])
a = tf.placeholder(tf.float32, shape=(2,2))
b = tf.matmul(a, a)
with tf.Session() as sess:
    print(sess.run(b, feed_dict={a: ra}))


W = tf.Variable(tf.zeros((2,2)), name="weights")
R = tf.Variable(tf.random_normal((2,2)), name="random_weights")
with tf.Session() as sess:
 ....: sess.run(tf.initialize_all_variables())
 ....: print(sess.run(W))
 ....: print(sess.run(R))

Q:) Create a placeholder tensor, W1 of shape (2, 2). Create a numpy array I with 
values [3, 0], [0, 1]. Define another tensor M that computes W1*W1. Run M and feed I. Print M.
'''
W1= tf.placeholder(tf.float32, shape=(2,2))
I = np.array([[3.0, 0.0],[0.0, 1.0]])
M = tf.matmul(W1,W1)
with tf.Session() as sess:
    sess.run(init_all_op)
    print(sess.run(M, feed_dict={W1: I}))
    
----------------------------------------------------------------------------------------------

(4) MathOperations:
tf.add,tf.subtract
t1 = tf.constant([[1, 2, 3], [4, 5, 6]])
t2 = tf.constant([[7, 8, 9], [0, 1, 2]])
t3 = tf.truediv(t1, t2) # Element by element division which returns floating point value
with tf.Session() as sess1:
    print(sess1.run(t3))
    
----------------------------------------------------------------------------------------------

(5) MAtrix Operations:

t2 = tf.constant([[7, 8, 9], [0, 1, 2]])
t3 = tf.transpose(t2, perm=[1, 0])

t2 = tf.matrix_inverse(t1)

t_sum = tf.reduce_sum(t1)   # This is equal to the sum of all the values in t1
t_prod = tf.reduce_prod(t1) # This is equal to the product of all the values in t1
t_min = tf.reduce_min(t1)   # This is equal to the minimum of all the values in t1

t3 = tf.cumsum([t1, t2, t1], axis=0)

x = tf.constant(2)
y = tf.constant(5)
def f1(): return tf.multiply(x, 17)
def f2(): return tf.add(y, 23)
r = tf.cond(tf.less(x, y), f1, f2)


------------------------------------------------------------------------------
(6)
Shapes:
t1 = tf.zeros((3, 4, 5, 6)) 
t2 = tf.size(t1) # Size gives the number of elements
t2 - tf.shape(t1) # Shape [3,4,5,6]
with tf.Session() as sess1:
    print(sess1.run(t2))    //360 
    
t1 = tf.zeros((3, 4, 5, 6))
t2 = tf.reshape(t1, (12, 5, 6)) # reshape tensor

t2 = tf.squeeze(t1) # squeeze removes dimensions of size 1

If T1 is a tensor with values [[12, 13, 11], [9, 11, 9], [2, 5, 7]]. 
How can we slice T1 so that we get tensor with values [9, 11, 9].
t1 = tf.constant([[12, 13, 11], [9, 11, 9], [2, 5, 7]])
t2 = tf.slice(t1, [1, 0], [1, 3] )
with tf.Session() as sess1:
    print(sess1.run(t2))


















Examples:

(1)
Implementing RELU using tf.cond
zeroval = tf.constant(0.0)
x = tf.placeholder(tf.float32, shape=())
reluval = tf.cond(x <=0, lambda: zeroval, lambda: x)
with tf.Session() as sess:
    sess.run(tf.global_variables_initializer())
    print(sess.run(reluval, feed_dict={x: -2.25}))














